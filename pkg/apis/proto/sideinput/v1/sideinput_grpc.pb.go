// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pkg/apis/proto/sideinput/v1/sideinput.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDefinedSideInputClient is the client API for UserDefinedSideInput service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDefinedSideInputClient interface {
	// RetrieveSideInput is the endpoint to retrieve the latest value of a given Side Input.
	RetrieveSideInput(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SideInputResponse, error)
	// IsReady is the health check endpoint to indicate whether the service is ready to be used.
	IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type userDefinedSideInputClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDefinedSideInputClient(cc grpc.ClientConnInterface) UserDefinedSideInputClient {
	return &userDefinedSideInputClient{cc}
}

func (c *userDefinedSideInputClient) RetrieveSideInput(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SideInputResponse, error) {
	out := new(SideInputResponse)
	err := c.cc.Invoke(ctx, "/sideinput.v1.UserDefinedSideInput/RetrieveSideInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDefinedSideInputClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/sideinput.v1.UserDefinedSideInput/IsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDefinedSideInputServer is the server API for UserDefinedSideInput service.
// All implementations must embed UnimplementedUserDefinedSideInputServer
// for forward compatibility
type UserDefinedSideInputServer interface {
	// RetrieveSideInput is the endpoint to retrieve the latest value of a given Side Input.
	RetrieveSideInput(context.Context, *emptypb.Empty) (*SideInputResponse, error)
	// IsReady is the health check endpoint to indicate whether the service is ready to be used.
	IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error)
	mustEmbedUnimplementedUserDefinedSideInputServer()
}

// UnimplementedUserDefinedSideInputServer must be embedded to have forward compatible implementations.
type UnimplementedUserDefinedSideInputServer struct {
}

func (UnimplementedUserDefinedSideInputServer) RetrieveSideInput(context.Context, *emptypb.Empty) (*SideInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSideInput not implemented")
}
func (UnimplementedUserDefinedSideInputServer) IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (UnimplementedUserDefinedSideInputServer) mustEmbedUnimplementedUserDefinedSideInputServer() {}

// UnsafeUserDefinedSideInputServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDefinedSideInputServer will
// result in compilation errors.
type UnsafeUserDefinedSideInputServer interface {
	mustEmbedUnimplementedUserDefinedSideInputServer()
}

func RegisterUserDefinedSideInputServer(s grpc.ServiceRegistrar, srv UserDefinedSideInputServer) {
	s.RegisterService(&UserDefinedSideInput_ServiceDesc, srv)
}

func _UserDefinedSideInput_RetrieveSideInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedSideInputServer).RetrieveSideInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sideinput.v1.UserDefinedSideInput/RetrieveSideInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedSideInputServer).RetrieveSideInput(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDefinedSideInput_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedSideInputServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sideinput.v1.UserDefinedSideInput/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedSideInputServer).IsReady(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDefinedSideInput_ServiceDesc is the grpc.ServiceDesc for UserDefinedSideInput service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDefinedSideInput_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sideinput.v1.UserDefinedSideInput",
	HandlerType: (*UserDefinedSideInputServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveSideInput",
			Handler:    _UserDefinedSideInput_RetrieveSideInput_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _UserDefinedSideInput_IsReady_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/proto/sideinput/v1/sideinput.proto",
}

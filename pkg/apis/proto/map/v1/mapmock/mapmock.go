// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/map/v1 (interfaces: MapClient)
//
// Generated by this command:
//
//	mockgen -destination mapmock/mapmock.go -package mapmock github.com/numaproj/numaflow-go/pkg/apis/proto/map/v1 MapClient
//

// Package mapmock is a generated GoMock package.
package mapmock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/map/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMapClient is a mock of MapClient interface.
type MockMapClient struct {
	ctrl     *gomock.Controller
	recorder *MockMapClientMockRecorder
	isgomock struct{}
}

// MockMapClientMockRecorder is the mock recorder for MockMapClient.
type MockMapClientMockRecorder struct {
	mock *MockMapClient
}

// NewMockMapClient creates a new mock instance.
func NewMockMapClient(ctrl *gomock.Controller) *MockMapClient {
	mock := &MockMapClient{ctrl: ctrl}
	mock.recorder = &MockMapClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapClient) EXPECT() *MockMapClientMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockMapClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockMapClientMockRecorder) IsReady(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockMapClient)(nil).IsReady), varargs...)
}

// MapFn mocks base method.
func (m *MockMapClient) MapFn(ctx context.Context, opts ...grpc.CallOption) (v1.Map_MapFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MapFn", varargs...)
	ret0, _ := ret[0].(v1.Map_MapFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapFn indicates an expected call of MapFn.
func (mr *MockMapClientMockRecorder) MapFn(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapFn", reflect.TypeOf((*MockMapClient)(nil).MapFn), varargs...)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: pkg/apis/proto/function/v1/udf.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunctionServiceClient is the client API for FunctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionServiceClient interface {
	// Per-element processing function
	DoFn(ctx context.Context, in *Datum, opts ...grpc.CallOption) (*DatumList, error)
	// Reduce funtion which accepts datum stream
	ReduceFn(ctx context.Context, opts ...grpc.CallOption) (FunctionService_ReduceFnClient, error)
}

type functionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionServiceClient(cc grpc.ClientConnInterface) FunctionServiceClient {
	return &functionServiceClient{cc}
}

func (c *functionServiceClient) DoFn(ctx context.Context, in *Datum, opts ...grpc.CallOption) (*DatumList, error) {
	out := new(DatumList)
	err := c.cc.Invoke(ctx, "/function.v1.FunctionService/DoFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceClient) ReduceFn(ctx context.Context, opts ...grpc.CallOption) (FunctionService_ReduceFnClient, error) {
	stream, err := c.cc.NewStream(ctx, &FunctionService_ServiceDesc.Streams[0], "/function.v1.FunctionService/ReduceFn", opts...)
	if err != nil {
		return nil, err
	}
	x := &functionServiceReduceFnClient{stream}
	return x, nil
}

type FunctionService_ReduceFnClient interface {
	Send(*Datum) error
	CloseAndRecv() (*DatumList, error)
	grpc.ClientStream
}

type functionServiceReduceFnClient struct {
	grpc.ClientStream
}

func (x *functionServiceReduceFnClient) Send(m *Datum) error {
	return x.ClientStream.SendMsg(m)
}

func (x *functionServiceReduceFnClient) CloseAndRecv() (*DatumList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DatumList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FunctionServiceServer is the server API for FunctionService service.
// All implementations must embed UnimplementedFunctionServiceServer
// for forward compatibility
type FunctionServiceServer interface {
	// Per-element processing function
	DoFn(context.Context, *Datum) (*DatumList, error)
	// Reduce funtion which accepts datum stream
	ReduceFn(FunctionService_ReduceFnServer) error
	mustEmbedUnimplementedFunctionServiceServer()
}

// UnimplementedFunctionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionServiceServer struct {
}

func (UnimplementedFunctionServiceServer) DoFn(context.Context, *Datum) (*DatumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoFn not implemented")
}
func (UnimplementedFunctionServiceServer) ReduceFn(FunctionService_ReduceFnServer) error {
	return status.Errorf(codes.Unimplemented, "method ReduceFn not implemented")
}
func (UnimplementedFunctionServiceServer) mustEmbedUnimplementedFunctionServiceServer() {}

// UnsafeFunctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionServiceServer will
// result in compilation errors.
type UnsafeFunctionServiceServer interface {
	mustEmbedUnimplementedFunctionServiceServer()
}

func RegisterFunctionServiceServer(s grpc.ServiceRegistrar, srv FunctionServiceServer) {
	s.RegisterService(&FunctionService_ServiceDesc, srv)
}

func _FunctionService_DoFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Datum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceServer).DoFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/function.v1.FunctionService/DoFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceServer).DoFn(ctx, req.(*Datum))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionService_ReduceFn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FunctionServiceServer).ReduceFn(&functionServiceReduceFnServer{stream})
}

type FunctionService_ReduceFnServer interface {
	SendAndClose(*DatumList) error
	Recv() (*Datum, error)
	grpc.ServerStream
}

type functionServiceReduceFnServer struct {
	grpc.ServerStream
}

func (x *functionServiceReduceFnServer) SendAndClose(m *DatumList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *functionServiceReduceFnServer) Recv() (*Datum, error) {
	m := new(Datum)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FunctionService_ServiceDesc is the grpc.ServiceDesc for FunctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "function.v1.FunctionService",
	HandlerType: (*FunctionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoFn",
			Handler:    _FunctionService_DoFn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReduceFn",
			Handler:       _FunctionService_ReduceFn_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/apis/proto/function/v1/udf.proto",
}

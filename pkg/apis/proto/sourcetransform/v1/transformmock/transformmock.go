// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/sourcetransform/v1 (interfaces: SourceTransformClient)
//
// Generated by this command:
//
//	mockgen -destination transformmock/transformmock.go -package transformermock github.com/numaproj/numaflow-go/pkg/apis/proto/sourcetransform/v1 SourceTransformClient
//

// Package transformermock is a generated GoMock package.
package transformermock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/sourcetransform/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSourceTransformClient is a mock of SourceTransformClient interface.
type MockSourceTransformClient struct {
	ctrl     *gomock.Controller
	recorder *MockSourceTransformClientMockRecorder
	isgomock struct{}
}

// MockSourceTransformClientMockRecorder is the mock recorder for MockSourceTransformClient.
type MockSourceTransformClientMockRecorder struct {
	mock *MockSourceTransformClient
}

// NewMockSourceTransformClient creates a new mock instance.
func NewMockSourceTransformClient(ctrl *gomock.Controller) *MockSourceTransformClient {
	mock := &MockSourceTransformClient{ctrl: ctrl}
	mock.recorder = &MockSourceTransformClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceTransformClient) EXPECT() *MockSourceTransformClientMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockSourceTransformClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockSourceTransformClientMockRecorder) IsReady(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockSourceTransformClient)(nil).IsReady), varargs...)
}

// SourceTransformFn mocks base method.
func (m *MockSourceTransformClient) SourceTransformFn(ctx context.Context, opts ...grpc.CallOption) (v1.SourceTransform_SourceTransformFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SourceTransformFn", varargs...)
	ret0, _ := ret[0].(v1.SourceTransform_SourceTransformFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SourceTransformFn indicates an expected call of SourceTransformFn.
func (mr *MockSourceTransformClientMockRecorder) SourceTransformFn(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceTransformFn", reflect.TypeOf((*MockSourceTransformClient)(nil).SourceTransformFn), varargs...)
}

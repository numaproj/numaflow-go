// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pkg/apis/proto/sink/v1/udsink.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDefinedSinkClient is the client API for UserDefinedSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDefinedSinkClient interface {
	// SinkFn writes the Datum to a user defined sink.
	SinkFn(ctx context.Context, in *DatumList, opts ...grpc.CallOption) (*ResponseList, error)
	// IsReady is the heartbeat endpoint for gRPC.
	IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type userDefinedSinkClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDefinedSinkClient(cc grpc.ClientConnInterface) UserDefinedSinkClient {
	return &userDefinedSinkClient{cc}
}

func (c *userDefinedSinkClient) SinkFn(ctx context.Context, in *DatumList, opts ...grpc.CallOption) (*ResponseList, error) {
	out := new(ResponseList)
	err := c.cc.Invoke(ctx, "/sink.v1.UserDefinedSink/SinkFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDefinedSinkClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/sink.v1.UserDefinedSink/IsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDefinedSinkServer is the server API for UserDefinedSink service.
// All implementations must embed UnimplementedUserDefinedSinkServer
// for forward compatibility
type UserDefinedSinkServer interface {
	// SinkFn writes the Datum to a user defined sink.
	SinkFn(context.Context, *DatumList) (*ResponseList, error)
	// IsReady is the heartbeat endpoint for gRPC.
	IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error)
	mustEmbedUnimplementedUserDefinedSinkServer()
}

// UnimplementedUserDefinedSinkServer must be embedded to have forward compatible implementations.
type UnimplementedUserDefinedSinkServer struct {
}

func (UnimplementedUserDefinedSinkServer) SinkFn(context.Context, *DatumList) (*ResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SinkFn not implemented")
}
func (UnimplementedUserDefinedSinkServer) IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (UnimplementedUserDefinedSinkServer) mustEmbedUnimplementedUserDefinedSinkServer() {}

// UnsafeUserDefinedSinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDefinedSinkServer will
// result in compilation errors.
type UnsafeUserDefinedSinkServer interface {
	mustEmbedUnimplementedUserDefinedSinkServer()
}

func RegisterUserDefinedSinkServer(s grpc.ServiceRegistrar, srv UserDefinedSinkServer) {
	s.RegisterService(&UserDefinedSink_ServiceDesc, srv)
}

func _UserDefinedSink_SinkFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatumList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedSinkServer).SinkFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sink.v1.UserDefinedSink/SinkFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedSinkServer).SinkFn(ctx, req.(*DatumList))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDefinedSink_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedSinkServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sink.v1.UserDefinedSink/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedSinkServer).IsReady(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDefinedSink_ServiceDesc is the grpc.ServiceDesc for UserDefinedSink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDefinedSink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sink.v1.UserDefinedSink",
	HandlerType: (*UserDefinedSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SinkFn",
			Handler:    _UserDefinedSink_SinkFn_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _UserDefinedSink_IsReady_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/proto/sink/v1/udsink.proto",
}

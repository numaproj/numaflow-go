// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/accumulator/v1 (interfaces: AccumulatorClient,Accumulator_AccumulateFnClient)
//
// Generated by this command:
//
//	mockgen -destination accumulatoremock/accumulatormock.go -package accumulatormock github.com/numaproj/numaflow-go/pkg/apis/proto/accumulator/v1 AccumulatorClient,Accumulator_AccumulateFnClient
//

// Package accumulatormock is a generated GoMock package.
package accumulatormock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/accumulator/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAccumulatorClient is a mock of AccumulatorClient interface.
type MockAccumulatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccumulatorClientMockRecorder
	isgomock struct{}
}

// MockAccumulatorClientMockRecorder is the mock recorder for MockAccumulatorClient.
type MockAccumulatorClientMockRecorder struct {
	mock *MockAccumulatorClient
}

// NewMockAccumulatorClient creates a new mock instance.
func NewMockAccumulatorClient(ctrl *gomock.Controller) *MockAccumulatorClient {
	mock := &MockAccumulatorClient{ctrl: ctrl}
	mock.recorder = &MockAccumulatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccumulatorClient) EXPECT() *MockAccumulatorClientMockRecorder {
	return m.recorder
}

// AccumulateFn mocks base method.
func (m *MockAccumulatorClient) AccumulateFn(ctx context.Context, opts ...grpc.CallOption) (v1.Accumulator_AccumulateFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccumulateFn", varargs...)
	ret0, _ := ret[0].(v1.Accumulator_AccumulateFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccumulateFn indicates an expected call of AccumulateFn.
func (mr *MockAccumulatorClientMockRecorder) AccumulateFn(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccumulateFn", reflect.TypeOf((*MockAccumulatorClient)(nil).AccumulateFn), varargs...)
}

// IsReady mocks base method.
func (m *MockAccumulatorClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockAccumulatorClientMockRecorder) IsReady(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockAccumulatorClient)(nil).IsReady), varargs...)
}

// MockAccumulator_AccumulateFnClient is a mock of Accumulator_AccumulateFnClient interface.
type MockAccumulator_AccumulateFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccumulator_AccumulateFnClientMockRecorder
	isgomock struct{}
}

// MockAccumulator_AccumulateFnClientMockRecorder is the mock recorder for MockAccumulator_AccumulateFnClient.
type MockAccumulator_AccumulateFnClientMockRecorder struct {
	mock *MockAccumulator_AccumulateFnClient
}

// NewMockAccumulator_AccumulateFnClient creates a new mock instance.
func NewMockAccumulator_AccumulateFnClient(ctrl *gomock.Controller) *MockAccumulator_AccumulateFnClient {
	mock := &MockAccumulator_AccumulateFnClient{ctrl: ctrl}
	mock.recorder = &MockAccumulator_AccumulateFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccumulator_AccumulateFnClient) EXPECT() *MockAccumulator_AccumulateFnClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAccumulator_AccumulateFnClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAccumulator_AccumulateFnClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAccumulator_AccumulateFnClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAccumulator_AccumulateFnClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAccumulator_AccumulateFnClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAccumulator_AccumulateFnClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAccumulator_AccumulateFnClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAccumulator_AccumulateFnClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAccumulator_AccumulateFnClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAccumulator_AccumulateFnClient) Recv() (*v1.AccumulatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.AccumulatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAccumulator_AccumulateFnClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAccumulator_AccumulateFnClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAccumulator_AccumulateFnClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAccumulator_AccumulateFnClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAccumulator_AccumulateFnClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAccumulator_AccumulateFnClient) Send(arg0 *v1.AccumulatorRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAccumulator_AccumulateFnClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAccumulator_AccumulateFnClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAccumulator_AccumulateFnClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAccumulator_AccumulateFnClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAccumulator_AccumulateFnClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAccumulator_AccumulateFnClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAccumulator_AccumulateFnClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAccumulator_AccumulateFnClient)(nil).Trailer))
}

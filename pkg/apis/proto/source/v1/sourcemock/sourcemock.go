// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/source/v1 (interfaces: SourceClient)

// Package sourcemock is a generated GoMock package.
package sourcemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/source/v1"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSourceClient is a mock of SourceClient interface.
type MockSourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSourceClientMockRecorder
}

// MockSourceClientMockRecorder is the mock recorder for MockSourceClient.
type MockSourceClientMockRecorder struct {
	mock *MockSourceClient
}

// NewMockSourceClient creates a new mock instance.
func NewMockSourceClient(ctrl *gomock.Controller) *MockSourceClient {
	mock := &MockSourceClient{ctrl: ctrl}
	mock.recorder = &MockSourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceClient) EXPECT() *MockSourceClientMockRecorder {
	return m.recorder
}

// AckFn mocks base method.
func (m *MockSourceClient) AckFn(arg0 context.Context, arg1 *v1.AckRequest, arg2 ...grpc.CallOption) (*v1.AckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AckFn", varargs...)
	ret0, _ := ret[0].(*v1.AckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AckFn indicates an expected call of AckFn.
func (mr *MockSourceClientMockRecorder) AckFn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckFn", reflect.TypeOf((*MockSourceClient)(nil).AckFn), varargs...)
}

// IsReady mocks base method.
func (m *MockSourceClient) IsReady(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockSourceClientMockRecorder) IsReady(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockSourceClient)(nil).IsReady), varargs...)
}

// PendingFn mocks base method.
func (m *MockSourceClient) PendingFn(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.PendingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PendingFn", varargs...)
	ret0, _ := ret[0].(*v1.PendingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingFn indicates an expected call of PendingFn.
func (mr *MockSourceClientMockRecorder) PendingFn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingFn", reflect.TypeOf((*MockSourceClient)(nil).PendingFn), varargs...)
}

// ReadFn mocks base method.
func (m *MockSourceClient) ReadFn(arg0 context.Context, arg1 *v1.ReadRequest, arg2 ...grpc.CallOption) (v1.Source_ReadFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadFn", varargs...)
	ret0, _ := ret[0].(v1.Source_ReadFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFn indicates an expected call of ReadFn.
func (mr *MockSourceClientMockRecorder) ReadFn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFn", reflect.TypeOf((*MockSourceClient)(nil).ReadFn), varargs...)
}

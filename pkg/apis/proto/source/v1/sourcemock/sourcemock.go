// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/source/v1 (interfaces: SourceClient,Source_ReadFnClient,Source_AckFnClient)

// Package sourcemock is a generated GoMock package.
package sourcemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/source/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSourceClient is a mock of SourceClient interface.
type MockSourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSourceClientMockRecorder
}

// MockSourceClientMockRecorder is the mock recorder for MockSourceClient.
type MockSourceClientMockRecorder struct {
	mock *MockSourceClient
}

// NewMockSourceClient creates a new mock instance.
func NewMockSourceClient(ctrl *gomock.Controller) *MockSourceClient {
	mock := &MockSourceClient{ctrl: ctrl}
	mock.recorder = &MockSourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceClient) EXPECT() *MockSourceClientMockRecorder {
	return m.recorder
}

// AckFn mocks base method.
func (m *MockSourceClient) AckFn(arg0 context.Context, arg1 ...grpc.CallOption) (v1.Source_AckFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AckFn", varargs...)
	ret0, _ := ret[0].(v1.Source_AckFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AckFn indicates an expected call of AckFn.
func (mr *MockSourceClientMockRecorder) AckFn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckFn", reflect.TypeOf((*MockSourceClient)(nil).AckFn), varargs...)
}

// IsReady mocks base method.
func (m *MockSourceClient) IsReady(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockSourceClientMockRecorder) IsReady(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockSourceClient)(nil).IsReady), varargs...)
}

// PartitionsFn mocks base method.
func (m *MockSourceClient) PartitionsFn(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.PartitionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartitionsFn", varargs...)
	ret0, _ := ret[0].(*v1.PartitionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionsFn indicates an expected call of PartitionsFn.
func (mr *MockSourceClientMockRecorder) PartitionsFn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionsFn", reflect.TypeOf((*MockSourceClient)(nil).PartitionsFn), varargs...)
}

// PendingFn mocks base method.
func (m *MockSourceClient) PendingFn(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.PendingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PendingFn", varargs...)
	ret0, _ := ret[0].(*v1.PendingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingFn indicates an expected call of PendingFn.
func (mr *MockSourceClientMockRecorder) PendingFn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingFn", reflect.TypeOf((*MockSourceClient)(nil).PendingFn), varargs...)
}

// ReadFn mocks base method.
func (m *MockSourceClient) ReadFn(arg0 context.Context, arg1 ...grpc.CallOption) (v1.Source_ReadFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadFn", varargs...)
	ret0, _ := ret[0].(v1.Source_ReadFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFn indicates an expected call of ReadFn.
func (mr *MockSourceClientMockRecorder) ReadFn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFn", reflect.TypeOf((*MockSourceClient)(nil).ReadFn), varargs...)
}

// MockSource_ReadFnClient is a mock of Source_ReadFnClient interface.
type MockSource_ReadFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockSource_ReadFnClientMockRecorder
}

// MockSource_ReadFnClientMockRecorder is the mock recorder for MockSource_ReadFnClient.
type MockSource_ReadFnClientMockRecorder struct {
	mock *MockSource_ReadFnClient
}

// NewMockSource_ReadFnClient creates a new mock instance.
func NewMockSource_ReadFnClient(ctrl *gomock.Controller) *MockSource_ReadFnClient {
	mock := &MockSource_ReadFnClient{ctrl: ctrl}
	mock.recorder = &MockSource_ReadFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource_ReadFnClient) EXPECT() *MockSource_ReadFnClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSource_ReadFnClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSource_ReadFnClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSource_ReadFnClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSource_ReadFnClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSource_ReadFnClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSource_ReadFnClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSource_ReadFnClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSource_ReadFnClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSource_ReadFnClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSource_ReadFnClient) Recv() (*v1.ReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.ReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSource_ReadFnClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSource_ReadFnClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockSource_ReadFnClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSource_ReadFnClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSource_ReadFnClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockSource_ReadFnClient) Send(arg0 *v1.ReadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSource_ReadFnClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSource_ReadFnClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockSource_ReadFnClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSource_ReadFnClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSource_ReadFnClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockSource_ReadFnClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSource_ReadFnClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSource_ReadFnClient)(nil).Trailer))
}

// MockSource_AckFnClient is a mock of Source_AckFnClient interface.
type MockSource_AckFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockSource_AckFnClientMockRecorder
}

// MockSource_AckFnClientMockRecorder is the mock recorder for MockSource_AckFnClient.
type MockSource_AckFnClientMockRecorder struct {
	mock *MockSource_AckFnClient
}

// NewMockSource_AckFnClient creates a new mock instance.
func NewMockSource_AckFnClient(ctrl *gomock.Controller) *MockSource_AckFnClient {
	mock := &MockSource_AckFnClient{ctrl: ctrl}
	mock.recorder = &MockSource_AckFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource_AckFnClient) EXPECT() *MockSource_AckFnClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSource_AckFnClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSource_AckFnClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSource_AckFnClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSource_AckFnClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSource_AckFnClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSource_AckFnClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSource_AckFnClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSource_AckFnClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSource_AckFnClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSource_AckFnClient) Recv() (*v1.AckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.AckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSource_AckFnClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSource_AckFnClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockSource_AckFnClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSource_AckFnClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSource_AckFnClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockSource_AckFnClient) Send(arg0 *v1.AckRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSource_AckFnClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSource_AckFnClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockSource_AckFnClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSource_AckFnClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSource_AckFnClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockSource_AckFnClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSource_AckFnClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSource_AckFnClient)(nil).Trailer))
}

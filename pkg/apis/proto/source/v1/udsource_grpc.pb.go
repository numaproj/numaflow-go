// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: pkg/apis/proto/source/v1/udsource.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDefinedSourceTransformerClient is the client API for UserDefinedSourceTransformer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDefinedSourceTransformerClient interface {
	// TransformFn applies a transform function to each datum element.
	// The transformation includes data filtering and event time assignment.
	TransformFn(ctx context.Context, in *Datum, opts ...grpc.CallOption) (*DatumList, error)
	// IsReady is the heartbeat endpoint for gRPC.
	IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type userDefinedSourceTransformerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDefinedSourceTransformerClient(cc grpc.ClientConnInterface) UserDefinedSourceTransformerClient {
	return &userDefinedSourceTransformerClient{cc}
}

func (c *userDefinedSourceTransformerClient) TransformFn(ctx context.Context, in *Datum, opts ...grpc.CallOption) (*DatumList, error) {
	out := new(DatumList)
	err := c.cc.Invoke(ctx, "/source.v1.UserDefinedSourceTransformer/TransformFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDefinedSourceTransformerClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/source.v1.UserDefinedSourceTransformer/IsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDefinedSourceTransformerServer is the server API for UserDefinedSourceTransformer service.
// All implementations must embed UnimplementedUserDefinedSourceTransformerServer
// for forward compatibility
type UserDefinedSourceTransformerServer interface {
	// TransformFn applies a transform function to each datum element.
	// The transformation includes data filtering and event time assignment.
	TransformFn(context.Context, *Datum) (*DatumList, error)
	// IsReady is the heartbeat endpoint for gRPC.
	IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error)
	mustEmbedUnimplementedUserDefinedSourceTransformerServer()
}

// UnimplementedUserDefinedSourceTransformerServer must be embedded to have forward compatible implementations.
type UnimplementedUserDefinedSourceTransformerServer struct {
}

func (UnimplementedUserDefinedSourceTransformerServer) TransformFn(context.Context, *Datum) (*DatumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformFn not implemented")
}
func (UnimplementedUserDefinedSourceTransformerServer) IsReady(context.Context, *emptypb.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (UnimplementedUserDefinedSourceTransformerServer) mustEmbedUnimplementedUserDefinedSourceTransformerServer() {
}

// UnsafeUserDefinedSourceTransformerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDefinedSourceTransformerServer will
// result in compilation errors.
type UnsafeUserDefinedSourceTransformerServer interface {
	mustEmbedUnimplementedUserDefinedSourceTransformerServer()
}

func RegisterUserDefinedSourceTransformerServer(s grpc.ServiceRegistrar, srv UserDefinedSourceTransformerServer) {
	s.RegisterService(&UserDefinedSourceTransformer_ServiceDesc, srv)
}

func _UserDefinedSourceTransformer_TransformFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Datum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedSourceTransformerServer).TransformFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.v1.UserDefinedSourceTransformer/TransformFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedSourceTransformerServer).TransformFn(ctx, req.(*Datum))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDefinedSourceTransformer_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedSourceTransformerServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.v1.UserDefinedSourceTransformer/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedSourceTransformerServer).IsReady(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDefinedSourceTransformer_ServiceDesc is the grpc.ServiceDesc for UserDefinedSourceTransformer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDefinedSourceTransformer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "source.v1.UserDefinedSourceTransformer",
	HandlerType: (*UserDefinedSourceTransformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransformFn",
			Handler:    _UserDefinedSourceTransformer_TransformFn_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _UserDefinedSourceTransformer_IsReady_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/proto/source/v1/udsource.proto",
}

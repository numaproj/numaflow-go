// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/serving/v1 (interfaces: ServingStoreClient)
//
// Generated by this command:
//
//	mockgen -destination servingmock/serving.go -package servingmock github.com/numaproj/numaflow-go/pkg/apis/proto/serving/v1 ServingStoreClient
//

// Package servingmock is a generated GoMock package.
package servingmock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/serving/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockServingStoreClient is a mock of ServingStoreClient interface.
type MockServingStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockServingStoreClientMockRecorder
	isgomock struct{}
}

// MockServingStoreClientMockRecorder is the mock recorder for MockServingStoreClient.
type MockServingStoreClientMockRecorder struct {
	mock *MockServingStoreClient
}

// NewMockServingStoreClient creates a new mock instance.
func NewMockServingStoreClient(ctrl *gomock.Controller) *MockServingStoreClient {
	mock := &MockServingStoreClient{ctrl: ctrl}
	mock.recorder = &MockServingStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServingStoreClient) EXPECT() *MockServingStoreClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServingStoreClient) Get(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*v1.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServingStoreClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServingStoreClient)(nil).Get), varargs...)
}

// IsReady mocks base method.
func (m *MockServingStoreClient) IsReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockServingStoreClientMockRecorder) IsReady(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockServingStoreClient)(nil).IsReady), varargs...)
}

// Put mocks base method.
func (m *MockServingStoreClient) Put(ctx context.Context, in *v1.PutRequest, opts ...grpc.CallOption) (*v1.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*v1.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockServingStoreClientMockRecorder) Put(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockServingStoreClient)(nil).Put), varargs...)
}
